#pragma version 10
#pragma typetrack false

// smart_contracts.personal_bank.contract.PersonalBank.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75
    // smart_contracts/personal_bank/contract.py:5
    // class PersonalBank(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x3298e7c0 0x3a395f2b // method "deposit(pay)uint64", method "withdraw()uint64"
    txna ApplicationArgs 0
    match main_deposit_route@5 main_withdraw_route@6

main_after_if_else@9:
    // smart_contracts/personal_bank/contract.py:5
    // class PersonalBank(ARC4Contract):
    intc_1 // 0
    return

main_withdraw_route@6:
    // smart_contracts/personal_bank/contract.py:49
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub withdraw
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_deposit_route@5:
    // smart_contracts/personal_bank/contract.py:17
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/personal_bank/contract.py:5
    // class PersonalBank(ARC4Contract):
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/personal_bank/contract.py:17
    // @abimethod()
    callsub deposit
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@7:
    // smart_contracts/personal_bank/contract.py:5
    // class PersonalBank(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@9
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts.personal_bank.contract.PersonalBank.deposit(pay_txn: uint64) -> uint64:
deposit:
    // smart_contracts/personal_bank/contract.py:17-18
    // @abimethod()
    // def deposit(self, pay_txn: gtxn.PaymentTransaction) -> UInt64:
    proto 1 1
    // smart_contracts/personal_bank/contract.py:31
    // pay_txn.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/personal_bank/contract.py:30-32
    // assert (
    //     pay_txn.receiver == Global.current_application_address
    // ), "Receiver must be the contract address"
    assert // Receiver must be the contract address
    // smart_contracts/personal_bank/contract.py:33
    // assert pay_txn.amount > 0, "Deposit amount must be greater than zero"
    frame_dig -1
    gtxns Amount
    dup
    assert // Deposit amount must be greater than zero
    // smart_contracts/personal_bank/contract.py:34
    // gt_user_name,added=self.github.maybe(pay_txn.sender)
    frame_dig -1
    gtxns Sender
    dup
    pushbytes "github"
    swap
    concat
    dup
    box_get
    dup
    uncover 2
    pop
    // smart_contracts/personal_bank/contract.py:35
    // if not added:
    bnz deposit_after_if_else@2
    // smart_contracts/personal_bank/contract.py:36
    // assert pay_txn.note.length > 0,"Must Provide A Github UserName"
    frame_dig -1
    gtxns Note
    len
    assert // Must Provide A Github UserName

deposit_after_if_else@2:
    // smart_contracts/personal_bank/contract.py:38
    // deposit_amt, deposited = self.depositors.maybe(pay_txn.sender)
    frame_dig 1
    box_get
    bury 1
    // smart_contracts/personal_bank/contract.py:40
    // if deposited and added:
    bz deposit_else_body@5
    frame_dig 3
    bz deposit_else_body@5
    // smart_contracts/personal_bank/contract.py:41
    // self.depositors[pay_txn.sender] += pay_txn.amount
    frame_dig 1
    dup
    box_get
    swap
    btoi
    swap
    assert // check self.depositors entry exists
    frame_dig 0
    +
    itob
    box_put

deposit_after_if_else@6:
    // smart_contracts/personal_bank/contract.py:45
    // return self.depositors[pay_txn.sender]
    frame_dig 1
    box_get
    swap
    btoi
    swap
    assert // check self.depositors entry exists
    frame_bury 0
    retsub

deposit_else_body@5:
    // smart_contracts/personal_bank/contract.py:43
    // self.depositors[pay_txn.sender] = pay_txn.amount
    frame_dig 0
    itob
    frame_dig 1
    swap
    box_put
    // smart_contracts/personal_bank/contract.py:44
    // self.github[pay_txn.sender]= pay_txn.note
    frame_dig -1
    gtxns Note
    frame_dig 2
    dup
    box_del
    pop
    swap
    box_put
    b deposit_after_if_else@6


// smart_contracts.personal_bank.contract.PersonalBank.withdraw() -> uint64:
withdraw:
    // smart_contracts/personal_bank/contract.py:59
    // deposit_amt, deposited = self.depositors.maybe(Txn.sender)
    txn Sender
    box_get
    swap
    btoi
    // smart_contracts/personal_bank/contract.py:60
    // assert deposited, "No deposits found for this account"
    swap
    assert // No deposits found for this account
    // smart_contracts/personal_bank/contract.py:62-66
    // result = itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=deposit_amt,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/personal_bank/contract.py:63
    // receiver=Txn.sender,
    txn Sender
    itxn_field Receiver
    itxn_field Amount
    // smart_contracts/personal_bank/contract.py:62
    // result = itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    // smart_contracts/personal_bank/contract.py:65
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/personal_bank/contract.py:62-66
    // result = itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=deposit_amt,
    //     fee=0,
    // ).submit()
    itxn_submit
    itxn Amount
    // smart_contracts/personal_bank/contract.py:68
    // self.depositors[Txn.sender] = UInt64(0)
    txn Sender
    intc_1 // 0
    itob
    box_put
    // smart_contracts/personal_bank/contract.py:70
    // return result.amount
    retsub
